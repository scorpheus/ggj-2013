<Version=1.0>
<Shader=
	<Input=
		<Attribute=<Name="a_position"><Semantic="Position">>
		<Attribute=<Name="a_normal"><Semantic="Normal">>
		<Attribute=<Name="a_uv"><Semantic="UV0">>

		<Uniform=<Name="u_fresnelPow_float"><Semantic="MaterialOpacity">>
		<Uniform=<Name="u_fresnelStrength_float"><Semantic="MaterialGlossiness">>
		<Uniform=<Name="u_fresnelColor_float"><Semantic="MaterialAmbient">>
		<Uniform=<Name="u_ambient_tex"><Semantic="MaterialTexture0">>		
		<Uniform=<Name="u_age_tex"><Semantic="MaterialTexture1">>
		<Uniform=<Name="u_tangent"><Semantic="Tangent">>

		<Uniform=<Name="u_nvm"><Semantic="NormalViewMatrix">>
	>
	<Varying=
		<Variable=<Name="v_uv"><Type="vec2">>
		<Variable=<Name="v_normal"><Type="vec3">>
	>
	<VertexSource="
v_uv = a_uv;
v_normal = a_normal;
	">
	<PixelSource="

// Normal
vec3 normal = n_mtx_mul(u_nvm, normalize(v_normal));

// Compute view reflection.
vec3 refl_view = reflect(vec3(0.0, 0.0, 1.0), normal);
float k_fresnel = pow(clamp((1.0 + normal.z) + 0.5, 0.0, 1.0), u_fresnelPow_float);

vec4 glass_color = texture2D(u_ambient_tex, v_uv) + u_fresnelColor_float*(k_fresnel * u_fresnelStrength_float);

%opacity% = 1.0;
%normal% = v_normal;
%constant% = glass_color ;
	">
>
