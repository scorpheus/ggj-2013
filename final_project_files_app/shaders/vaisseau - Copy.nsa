<Version=1.0>
<Shader=
	<Input=
		<Attribute=<Name="a_position"><Semantic="Position">>
		<Attribute=<Name="a_normal"><Semantic="Normal">>
		<Attribute=<Name="a_uv"><Semantic="UV0">>

		<Uniform=<Name="u_opacity_float"><Semantic="MaterialOpacity">>				
		<Uniform=<Name="u_diffuse_map"><Semantic="MaterialTexture0">>		
		<Uniform=<Name="u_normal_map"><Semantic="MaterialTexture1">>
		<Uniform=<Name="u_tangent"><Semantic="Tangent">>

		<Uniform=<Name="u_Clock"><Semantic="Clock"><Scope=<Pixel>>>

		<Uniform=<Name="u_nvm"><Semantic="NormalViewMatrix">>
	>
	<Varying=
		<Variable=<Name="v_uv"><Type="vec2">>
		<Variable=<Name="v_normal"><Type="vec3">>
		<Variable=<Name="v_position"><Type="vec3">>
	>
	<VertexSource="
v_uv = a_uv;
v_normal = a_normal;
v_position = a_position;
	">
	<PixelSource="


vec4 c_diffuse = texture2D(u_diffuse_map, v_uv);
vec4 c_normal = texture2D(u_normal_map, v_uv);

// Normal
vec3 normal = n_mtx_mul(u_nvm, normalize(v_normal + vec3(v_uv.x+cos(v_position.z*0.01+u_Clock*1.0), 0.0,  v_uv.y)));

// Compute view reflection.
vec3 refl_view = reflect(vec3(0.0, 0.0, 1.0), normal);
float k_fresnel = pow(clamp((1.0 + normal.z) + 0.5, 0.0, 1.0), 20.0);

// Compute environment reflection color.
//vec4 c_env = vec4(1.0 / 1.4, 1.2 / 1.4, 1.4 / 1.4, 1.0);	// Seems to work best...
vec4 c_env = vec4(0.0,cos(u_Clock*0.1), 0.5, 1.0);	// Seems to work best...

vec4 glass_color = c_env * k_fresnel * 0.5 ;

%opacity% = max(0.35, k_fresnel);//*cos(v_position.z*1.1+u_Clock*5.0)+0.5;
%normal% = v_normal;
%constant% = glass_color*2.0 ;
	">
>
