<Version=1.0>
<Shader=
	<Input=
		<Attribute=<Name="a_position"><Semantic="Position">>
		<Attribute=<Name="a_normal"><Semantic="Normal">>
		<Attribute=<Name="a_uv"><Semantic="UV0">>

		<Uniform=<Name="u_powerFresnel"><Semantic="MaterialOpacity">>				
		<Uniform=<Name="u_fresnel_tex"><Semantic="MaterialTexture0">>		
		<Uniform=<Name="u_age_tex"><Semantic="MaterialTexture1">>
		<Uniform=<Name="u_tangent"><Semantic="Tangent">>

		<Uniform=<Name="u_nvm"><Semantic="NormalViewMatrix">>
	>
	<Varying=
		<Variable=<Name="v_uv"><Type="vec2">>
		<Variable=<Name="v_normal"><Type="vec3">>
	>
	<VertexSource="
v_uv = a_uv;
v_normal = a_normal;
	">
	<PixelSource="

// Normal
vec3 normal = n_mtx_mul(u_nvm, normalize(v_normal));

// Compute view reflection.
vec3 refl_view = reflect(vec3(0.0, 0.0, 1.0), normal);
float k_fresnel = pow(clamp((1.0 + normal.z) + 0.5, 0.0, 1.0), u_powerFresnel);
k_fresnel = 1.0-clamp(k_fresnel, 0.01, 0.99);
// Compute environment reflection color.
//vec4 c_env = vec4(1.0 / 1.4, 1.2 / 1.4, 1.4 / 1.4, 1.0);	// Seems to work best...
vec4 c_env = vec4(1.0, 0.0,0.0, 1.0);	// Seems to work best...

vec2 glass_uv = (k_fresnel, k_fresnel);
vec4 c_glass_color = texture2D(u_fresnel_tex, glass_uv);

%opacity% = 1.0;
%normal% = v_normal;
%constant% = c_glass_color ;
	">
>
